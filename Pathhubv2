(function(...) local _lIlIIIIIIIlIllI = loadstring or load; if not _lIlIIIIIIIlIllI then return; end; local _lIlIIllllIII;local b='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';_lIlIIllllIII=function(data)data=string.gsub(data,'[^'..b..'=]','');return(data:gsub('.',function(x)if(x=='=')then return''end;local r,f='',(b:find(x)-1);for i=6,1,-1 do r=r..(f%2^i-f%2^(i-1)>0 and'1'or'0')end;return r;end):gsub('%d%d%d%d%d%d%d%d',function(x)if(#x~=8)then return''end;local c=0;for i=1,8 do c=c+(x:sub(i,i)=='1'and 2^(8-i)or 0)end;return string.char(c)end))end; local _IIlllllIIlI = ""; local fn, err = _lIlIIIIIIIlIllI(_lIlIIllllIII(_IIlllllIIlI)); if fn then local success, result = pcall(fn, ...); if not success then warn("PathHub Script Error: " .. tostring(result)); end else warn("PathHub Loader Error: " .. (err or "Unknown Error")); end end)(...)
